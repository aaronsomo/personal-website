{"version":3,"sources":["components/HomePage.jsx","components/App.jsx","serviceWorker.js","index.js"],"names":["HomePage","darkBackgroundModes","lightBackgroundModes","useState","Configs","backgroundType","plainBackgroundMode","appClass","setAppClass","devIntro","devDesc","backgroundMode","setBackgroundMode","backgroundIndex","setBackgroundIndex","bgStyle","setBgStyle","icons","checkIfNightModeEnabled","checkIfDayModeEnabled","useEffect","gradientColors","background","backgroundSize","backgroundImageUrl","className","style","onClick","length","map","icon","index","target","rel","href","url","key","image","App","props","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2/BAwLeA,G,KAlLE,WACf,IAAMC,EAAsB,CAC1B,MACA,WACA,YACA,WACA,WACA,SACA,cAGIC,EAAuB,CAC3B,QACA,WACA,cACA,aACA,YACA,eAjBmB,EAoBuBC,mBAASF,GApBhC,gCAqByBE,mBAASD,IArBlC,gCAsBuBC,mBAASC,EAAQC,iBAtBxC,mBAsBdA,EAtBc,aAuBWF,mBAASC,EAAQE,sBAvB5B,mBAuBdC,EAvBc,KAuBJC,EAvBI,OAwBWL,mBAASC,EAAQK,UAxB5B,mBAwBdA,EAxBc,aAyBSN,mBAASC,EAAQM,UAzB1B,mBAyBdA,EAzBc,aA0BuBP,mBAAS,YA1BhC,mBA0BdQ,EA1Bc,KA0BEC,EA1BF,OA2ByBT,mBAAS,GA3BlC,mBA2BdU,EA3Bc,KA2BGC,EA3BH,OA4BSX,mBAAS,IA5BlB,mBA4BdY,EA5Bc,KA4BLC,EA5BK,OA6BKb,mBAASC,EAAQa,OA7BtB,mBA6BdA,EA7Bc,KA+BfC,GA/Be,KA+BW,WAC9B,MAA0B,UAAnBb,GAA2C,eAAbE,IAGjCY,EAAwB,WAC5B,MAA0B,UAAnBd,GAA2C,aAAbE,GAkHvC,OAZAa,qBAAU,WAzFe,UAAnBf,IATmB,aAAnBA,GAsGFG,EAAY,YACZQ,EA5EEZ,EAAQiB,eACH,CACLC,WAAY,2BAA6BlB,EAAQiB,eAAiB,IAClEE,eAAgB,aAGX,CACLD,WACE,8DACFC,eAAgB,eAlBG,UAAnBlB,IAuFFG,EAAY,iBACZQ,EAhEEZ,EAAQoB,mBACH,CACLF,WACE,QACAlB,EAAQoB,mBACR,mCACFD,eAAgB,SAGX,CACLD,WACE,qEACFC,eAAgB,eAyDpB,yBAAKE,UAAWlB,EAAUmB,MAAOX,GAE/B,yBAAKU,UAAU,cAAcE,QA9CT,WAClBT,KACFV,EAAY,YACZM,EAAmB,GACnBF,EAAkBX,EAAoB,KAC7BkB,MACTX,EAAY,cACZM,EAAmB,GACnBF,EAAkBV,EAAqB,QAuCvC,yBAAKuB,UAAWd,EAAgBgB,QAnCA,WAEhCT,KACAL,EAAkBX,EAAqB0B,OAAS,GAEhDd,EAAmBD,EAAkB,GACrCD,EAAkBV,EAAqBW,EAAkB,KAEzDM,KACAN,EAAkBZ,EAAoB2B,OAAS,GAE/Cd,EAAmBD,EAAkB,GACrCD,EAAkBX,EAAoBY,EAAkB,MAExDC,EAAmB,GACnBF,EAlCEM,IACKhB,EAAqB,GACnBiB,IACFlB,EAAoB,QADtB,MAqDH,0BAAMwB,UAAU,YACd,wBAAIA,UAAU,SAAShB,GACvB,yBAAKgB,UAAU,WACb,kBAAC,IAAD,KAASf,IAEX,yBAAKe,UAAU,gBACZR,EAAMY,KAAI,SAACC,EAAMC,GAAP,OACT,uBACEC,OAAO,SACPC,IAAI,sBACJC,KAAI,UAAKJ,EAAKK,KACdC,IAAKL,GAEL,uBAAGN,UAAS,cAASK,EAAKO,mBChK3BC,EARH,SAAAC,GACV,OACE,6BACE,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8b8e8e7d.chunk.js","sourcesContent":["import React, { Component, useState, useEffect } from 'react';\nimport Typist from 'react-typist';\nimport '../App.css';\nimport Configs from '../configurations.json';\nimport ProjectList from './ProjectList.jsx';\n\nconst HomePage = () => {\n  const darkBackgroundModes = [\n    'day',\n    'terminal',\n    'torquoise',\n    'alizarin',\n    'amythyst',\n    'carrot',\n    'peterriver'\n  ];\n\n  const lightBackgroundModes = [\n    'night',\n    'lightred',\n    'lightpurple',\n    'lightgreen',\n    'lightblue',\n    'lightyellow'\n  ];\n\n  const [darkBackground, setDarkBackground] = useState(darkBackgroundModes);\n  const [lightBackground, setLightBackground] = useState(lightBackgroundModes);\n  const [backgroundType, setBackgroundType] = useState(Configs.backgroundType);\n  const [appClass, setAppClass] = useState(Configs.plainBackgroundMode);\n  const [devIntro, setDevIntro] = useState(Configs.devIntro);\n  const [devDesc, setDevDesc] = useState(Configs.devDesc);\n  const [backgroundMode, setBackgroundMode] = useState('default');\n  const [backgroundIndex, setBackgroundIndex] = useState(0);\n  const [bgStyle, setBgStyle] = useState({});\n  const [icons, setIcons] = useState(Configs.icons);\n\n  const checkIfNightModeEnabled = () => {\n    return backgroundType === 'plain' && appClass === 'nightlight';\n  };\n\n  const checkIfDayModeEnabled = () => {\n    return backgroundType === 'plain' && appClass === 'daylight';\n  };\n\n  const checkIfGradientTypeEnabled = () => {\n    if (backgroundType === 'gradient') {\n      return true;\n    } else {\n      return false;\n    }\n    // return backgroundType === 'gradient';\n  };\n\n  const checkIfPlainTypeEnabled = () => {\n    if (backgroundType === 'plain') {\n      return true;\n    } else {\n      return false;\n    }\n    // return backgroundType === 'plain';\n  };\n\n  const checkIfImageTypeEnabled = () => {\n    if (backgroundType === 'image') {\n      return true;\n    } else {\n      return false;\n    }\n    // return backgroundType === 'image';\n  };\n\n  const prepareGradientStyleSheets = () => {\n    if (Configs.gradientColors) {\n      return {\n        background: 'linear-gradient(-45deg, ' + Configs.gradientColors + ')',\n        backgroundSize: '400% 400%'\n      };\n    } else {\n      return {\n        background:\n          'linear-gradient(-45deg, #EE7752, #E73C7E, #23A6D5, #23D5AB)',\n        backgroundSize: '400% 400%'\n      };\n    }\n  };\n\n  const prepareBackgroundImageStyle = () => {\n    if (Configs.backgroundImageUrl) {\n      return {\n        background:\n          'url(\"' +\n          Configs.backgroundImageUrl +\n          '\") no-repeat center center fixed',\n        backgroundSize: 'cover'\n      };\n    } else {\n      return {\n        background:\n          'url(\"/images/sample-background.jpg\") no-repeat center center fixed',\n        backgroundSize: 'cover'\n      };\n    }\n  };\n\n  const getDefaultModeBasedOnBackgroundType = () => {\n    if (checkIfNightModeEnabled()) {\n      return lightBackgroundModes[0];\n    } else if (checkIfDayModeEnabled()) {\n      return darkBackgroundModes[0];\n    }\n  };\n\n  const changeThemeMode = () => {\n    if (checkIfNightModeEnabled()) {\n      setAppClass('daylight');\n      setBackgroundIndex(0);\n      setBackgroundMode(darkBackgroundModes[0]);\n    } else if (checkIfDayModeEnabled()) {\n      setAppClass('nightlight');\n      setBackgroundIndex(0);\n      setBackgroundMode(lightBackgroundModes[0]);\n    }\n  };\n\n  const changeBackgroundBasedonMode = () => {\n    if (\n      checkIfNightModeEnabled() &&\n      backgroundIndex < lightBackgroundModes.length - 1\n    ) {\n      setBackgroundIndex(backgroundIndex + 1);\n      setBackgroundMode(lightBackgroundModes[backgroundIndex + 1]);\n    } else if (\n      checkIfDayModeEnabled() &&\n      backgroundIndex < darkBackgroundModes.length - 1\n    ) {\n      setBackgroundIndex(backgroundIndex + 1);\n      setBackgroundMode(darkBackgroundModes[backgroundIndex + 1]);\n    } else {\n      setBackgroundIndex(0);\n      setBackgroundMode(getDefaultModeBasedOnBackgroundType());\n    }\n  };\n\n  useEffect(() => {\n    if (checkIfPlainTypeEnabled()) {\n      return;\n    } else if (checkIfGradientTypeEnabled()) {\n      setAppClass('gradient');\n      setBgStyle(prepareGradientStyleSheets());\n    } else if (checkIfImageTypeEnabled()) {\n      setAppClass('full-bg-image');\n      setBgStyle(prepareBackgroundImageStyle());\n    }\n  });\n\n  return (\n    <div className={appClass} style={bgStyle}>\n      {/* // <div className=\"daylight\" style={bgStyle}> */}\n      <div className=\"change-mode\" onClick={changeThemeMode} />\n      <div className={backgroundMode} onClick={changeBackgroundBasedonMode}>\n        <main className=\"App-main\">\n          <h1 className=\"intro\">{devIntro}</h1>\n          <div className=\"tagline\">\n            <Typist>{devDesc}</Typist>\n          </div>\n          <div className=\"icons-social\">\n            {icons.map((icon, index) => (\n              <a\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                href={`${icon.url}`}\n                key={index}\n              >\n                <i className={`fab ${icon.image}`} />\n              </a>\n            ))}\n          </div>\n        </main>\n      </div>\n    </div>\n  );\n};\n\nexport default HomePage;\n","import React, { Component } from 'react';\nimport Typist from 'react-typist';\nimport '../App.css';\nimport Configs from '../configurations.json';\nimport HomePage from './HomePage.jsx';\n\nconst App = props => {\n  return (\n    <div>\n      <HomePage />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from '../src/components/App.jsx';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}